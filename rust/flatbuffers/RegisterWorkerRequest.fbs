include "common.fbs";

/* void detail::LoadSaveHelper<
RegisterWorkerRequest, LoadContext<ArenaObjectReader> >::SerializeFun::operator()<

WorkerInterface,
ProcessClass,
ProcessClass,
ClusterControllerPriorityInfo,
long,
Optional<DataDistributorInterface>,
Optional<RatekeeperInterface>,
Optional<BlobManagerInterface>,
Optional<EncryptKeyProxyInterface>,
Standalone<VectorRef<StringRef, (VecSerStrategy)0> >,
std::vector<NetworkAddress, std::allocator<NetworkAddress> >,
ReplyPromise<RegisterWorkerReply>,
bool,
long,
ConfigClassSet,
bool>(WorkerInterface&, ProcessClass&, ProcessClass&, ClusterControllerPriorityInfo&, long&, Optional<DataDistributorInterface>&, Optional<RatekeeperInterface>&, Optional<BlobManagerInterface>&, Optional<EncryptKeyProxyInterface>&, Standalone<VectorRef<StringRef, (VecSerStrategy)0> >&, std::vector<NetworkAddress, std::allocator<NetworkAddress> >&, ReplyPromise<RegisterWorkerReply>&, bool&, long&, ConfigClassSet&, bool&) at /root/src/foundationdb/flow/flat_buffers.h:1116 */
table RegisterWorkerRequest {
    worker_interface: WorkerInterface;
    initial_class: ProcessClass;
    process_class: ProcessClass;
    priority_info: ClusterControllerPriorityInfo;
    generation: long; // FDBTypes.h: typedef int64_t Generation;
    distributor_interface: OptionalDataDistributorInterface;
    ratekeeper_interface: OptionalRatekeeperInterface;
    blob_manager_interface: OptionalBlobManagerInterface;
    encrypt_key_proxy: OptionalEncryptKeyProxyInterface;
    issues: [StringVectorEntry];
    incompatible_peers: [NetworkAddress];
    reply: ReplyPromise;
    degraded: bool;
    last_seen_knob_version: long; // FDBTypes.h: typedef int64_t Version;
    knob_config_class_set: ConfigClassSet;
    request_db_info: bool;
}

table FakeRoot {
    register_worker_request: RegisterWorkerRequest;
}

root_type FakeRoot;