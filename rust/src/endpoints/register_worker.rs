#[allow(dead_code, unused_imports)]
#[path = "../../target/flatbuffers/RegisterWorkerRequest_generated.rs"]
mod register_worker_request;

#[allow(dead_code, unused_imports)]
#[path = "../../target/flatbuffers/RegisterWorkerReply_generated.rs"]
mod register_worker_reply;

// TODO: Move the rest of these includes into test-only packages:

#[allow(dead_code, unused_imports)]
#[path = "../../target/flatbuffers/LocalityData_generated.rs"]
mod locality_data;

#[allow(dead_code, unused_imports)]
#[path = "../../target/flatbuffers/ClientWorkerInterface_generated.rs"]
mod client_worker_interface;

#[allow(dead_code, unused_imports)]
#[path = "../../target/flatbuffers/WorkerInterface_generated.rs"]
mod worker_interface;

use crate::flow::{
    file_identifier::{IdentifierType, ParsedFileIdentifier},
    Endpoint, FlowMessage, Peer, Result,
};
use crate::services::ConnectionKeeper;

use flatbuffers::FlatBufferBuilder;

use std::sync::Arc;

const REGISTER_WORKER_REQUEST_FILE_IDENTIFIER: ParsedFileIdentifier = ParsedFileIdentifier {
    file_identifier: 14332605,
    inner_wrapper: IdentifierType::None,
    outer_wrapper: IdentifierType::None,
    file_identifier_name: Some("RegisterWorkerRequest"),
};

const REGISTER_WORKER_RESPONSE_FILE_IDENTIFIER: ParsedFileIdentifier = ParsedFileIdentifier {
    file_identifier: 16475696,
    inner_wrapper: IdentifierType::Optional,
    outer_wrapper: IdentifierType::ErrorOr,
    file_identifier_name: Some("RegisterWorkerReply"),
};

thread_local! {
    static REQUEST_BUILDER : std::cell::RefCell<FlatBufferBuilder<'static>> = std::cell::RefCell::new(FlatBufferBuilder::with_capacity(1024));
}

thread_local! {
    static REPLY_BUILDER : std::cell::RefCell<FlatBufferBuilder<'static>> = std::cell::RefCell::new(FlatBufferBuilder::with_capacity(1024));
}

fn serialize_request(
    builder: &mut FlatBufferBuilder<'static>,
    endpoint: Endpoint,
) -> Result<FlowMessage> {
    use register_worker_request::{FakeRoot, FakeRootArgs, RegisterWorkerRequest, RegisterWorkerRequestArgs};
    let peer = match endpoint.peer {
        Peer::Remote(socketAddr) => {
            socketAddr
        },
        Peer::Local(_) => {
            return Err("rust-language cluster controllers not supported yet. :-)".into());
        }
    };
    let (flow, reply_promise) = super::create_request_headers(builder, peer);
    let register_worker_request = Some(RegisterWorkerRequest::create(builder, &RegisterWorkerRequestArgs {

    }));
    let fake_root = FakeRoot::create(builder, &FakeRootArgs { register_worker_request });
    builder.finish(fake_root, Some("myfi"));
    super::finalize_request(
        builder,
        flow,
        endpoint.token,
        REGISTER_WORKER_REQUEST_FILE_IDENTIFIER,
    )
}

fn deserialize_response(
    flow_message: FlowMessage
) -> Result<register_worker_reply::RegisterWorkerReply<'static>> {
    unimplemented!();
}

fn deserialize_locality_data(buf: &[u8]) -> Result<()> {
    let locality_data = locality_data::root_as_fake_root(&buf)?;
    println!("{:?}", locality_data);
    Ok(())
}

fn deserialize_worker_interface(buf: &[u8]) -> Result<()> {
    let worker_interface = worker_interface::root_as_fake_root(&buf)?;
    println!("{:x?}", worker_interface);
    Ok(())
}
#[test]
fn test_client_worker_interface_serializer() -> Result<()> {
    let buffer_21ClientWorkerInterface = vec![
        0x44, 0x00, 0x00, 0x00, 0x68, 0x7c, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
        0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x0d, 0x00, 0x04, 0x00,
        0x0c, 0x00, 0x08, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x08, 0x00, 0x09, 0x00, 0x08,
        0x00, 0x04, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0a, 0x00, 0x0c, 0x00,
        0x08, 0x00, 0x18, 0x00, 0x14, 0x00, 0x04, 0x00, 0x22, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x3e, 0x00, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x79,
        0x46, 0x01, 0x9c, 0xcd, 0xd0, 0xf4, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x71, 0x76, 0x1c, 0xa1,
        0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x8a, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0xdb, 0xac, 0x91, 0x68, 0x9b, 0x20, 0x03, 0xd0, 0x1e, 0x00, 0x00,
        0x00, 0x34, 0xd3, 0x60, 0xd5, 0x04, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x0c, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0x0c,
        0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0xda, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x5d, 0xe8, 0x7c, 0x43, 0x07, 0x0a,
        0xc8, 0x7e, 0x1d, 0x00, 0x00, 0x00, 0x05, 0xfd, 0xa6, 0xf6, 0x08, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0xef, 0xbe, 0xad, 0xde,
    ];

    let client_worker_interface =
        client_worker_interface::root_as_fake_root(&buffer_21ClientWorkerInterface);
    println!("{:?}", client_worker_interface);
    Ok(())
}

#[test]
fn test_locality_data_serializer() -> Result<()> {
    #[allow(non_snake_case)]
    let buffer_11EnsureTableI12LocalityDataE = vec![
        0x1c, 0x00, 0x00, 0x00, 0xea, 0xbc, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0d,
        0x00, 0x04, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x06, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64,
        0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x72, 0x6f, 0x63, 0x09, 0x00, 0x00, 0x00,
        0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x64, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
        0x00, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00,
        0x00, 0x00, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x00, 0x09, 0x00, 0x00, 0x00, 0x6d,
        0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x64, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x64, 0x63, 0x69, 0x64,
    ];
    deserialize_locality_data(&buffer_11EnsureTableI12LocalityDataE)?;
    Ok(())
}

#[test]
fn test_worker_interface_serializer() -> Result<()> {
    #[allow(non_snake_case)]
    let buffer_15WorkerInterface = vec![
        0x8c, 0x00, 0x00, 0x00, 0x8e, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
        0x00, 0x10, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x0d, 0x00, 0x04, 0x00,
        0x0c, 0x00, 0x08, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x08, 0x00, 0x09, 0x00, 0x08,
        0x00, 0x04, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0a, 0x00, 0x0c, 0x00,
        0x0e, 0x00, 0x24, 0x00, 0x04, 0x00, 0x14, 0x00, 0x18, 0x00, 0x1c, 0x00, 0x20, 0x00, 0x3a,
        0x00, 0x70, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x18, 0x00,
        0x1c, 0x00, 0x20, 0x00, 0x24, 0x00, 0x28, 0x00, 0x2c, 0x00, 0x30, 0x00, 0x34, 0x00, 0x38,
        0x00, 0x3c, 0x00, 0x40, 0x00, 0x44, 0x00, 0x48, 0x00, 0x4c, 0x00, 0x50, 0x00, 0x54, 0x00,
        0x58, 0x00, 0x5c, 0x00, 0x60, 0x00, 0x64, 0x00, 0x68, 0x00, 0x6c, 0x00, 0x08, 0x00, 0x18,
        0x00, 0x14, 0x00, 0x04, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x4a, 0x00,
        0x00, 0x00, 0x6c, 0x09, 0x00, 0x00, 0x5c, 0x09, 0x00, 0x00, 0x04, 0x09, 0x00, 0x00, 0xb0,
        0x08, 0x00, 0x00, 0x5c, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0xb4, 0x07, 0x00, 0x00,
        0x60, 0x07, 0x00, 0x00, 0x0c, 0x07, 0x00, 0x00, 0xb8, 0x06, 0x00, 0x00, 0x64, 0x06, 0x00,
        0x00, 0x10, 0x06, 0x00, 0x00, 0xbc, 0x05, 0x00, 0x00, 0x68, 0x05, 0x00, 0x00, 0x14, 0x05,
        0x00, 0x00, 0xc0, 0x04, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0x18, 0x04, 0x00, 0x00, 0xc4,
        0x03, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x14, 0x03, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
        0x6c, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x70, 0x01, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x2a, 0x8a, 0x9d, 0xb3, 0xc8, 0x4a,
        0x44, 0x24, 0x31, 0xf2, 0x4b, 0xd7, 0x9d, 0xed, 0x4e, 0x85, 0x04, 0x01, 0x00, 0x00, 0xb0,
        0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0a, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0xd7, 0x2c, 0x68,
        0x47, 0x94, 0xae, 0x7f, 0x05, 0x3b, 0x00, 0x00, 0x00, 0xa0, 0xbb, 0x6a, 0x23, 0x04, 0x00,
        0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0xef, 0xbe, 0xad, 0xde, 0x5a, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x4b, 0xc2, 0x46, 0xb1, 0xd3, 0xec, 0x63, 0xfc, 0x3a, 0x00, 0x00, 0x00, 0xb4,
        0x57, 0xc4, 0xd6, 0x04, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x00,
        0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0xaa, 0x01, 0x00, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x49, 0x30, 0xd3, 0x77, 0x85, 0x50, 0xcb, 0x8b,
        0x39, 0x00, 0x00, 0x00, 0x21, 0xd3, 0xa9, 0xb4, 0x04, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00,
        0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x01,
        0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4,
        0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde,
        0xfa, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0xab, 0x62, 0x1e,
        0x03, 0x36, 0x01, 0x80, 0x11, 0x38, 0x00, 0x00, 0x00, 0x06, 0xa6, 0xd3, 0xea, 0x04, 0x00,
        0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0xef, 0xbe, 0xad, 0xde, 0x4a, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xf0, 0x01,
        0x00, 0x00, 0xa3, 0xdc, 0x42, 0xed, 0xb3, 0xe9, 0x63, 0xcd, 0x37, 0x00, 0x00, 0x00, 0xbc,
        0x26, 0x9d, 0x91, 0x04, 0x00, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x00,
        0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x9a, 0x02, 0x00, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0xab, 0x27, 0xce, 0x9f, 0xcf, 0xf1, 0xe0, 0x9e,
        0x36, 0x00, 0x00, 0x00, 0x6d, 0x75, 0x91, 0xa7, 0x04, 0x00, 0x00, 0x00, 0xc4, 0x02, 0x00,
        0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x02,
        0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4,
        0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde,
        0xea, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0xb3, 0x52, 0x17,
        0xc5, 0x4f, 0x14, 0x27, 0xeb, 0x35, 0x00, 0x00, 0x00, 0xf6, 0x56, 0x28, 0xbf, 0x04, 0x00,
        0x00, 0x00, 0x14, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0xef, 0xbe, 0xad, 0xde, 0x3a, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe0, 0x02,
        0x00, 0x00, 0x73, 0xbe, 0x5c, 0x33, 0x9b, 0xe0, 0xdf, 0x88, 0x34, 0x00, 0x00, 0x00, 0x7d,
        0xda, 0x97, 0xa5, 0x04, 0x00, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x00,
        0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x8a, 0x03, 0x00, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x85, 0xf1, 0x68, 0x1c, 0xd0, 0x67, 0x4f, 0xf5,
        0x33, 0x00, 0x00, 0x00, 0x86, 0xea, 0xa5, 0x19, 0x04, 0x00, 0x00, 0x00, 0xb4, 0x03, 0x00,
        0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x03,
        0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4,
        0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde,
        0xda, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0xcd, 0x35, 0x51,
        0xf8, 0x91, 0xec, 0x28, 0x90, 0x32, 0x00, 0x00, 0x00, 0x56, 0xa5, 0xaf, 0x1f, 0x04, 0x00,
        0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x14, 0x04, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0xef, 0xbe, 0xad, 0xde, 0x2a, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x32, 0x04,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xd8, 0x03, 0x00, 0x00, 0x61, 0xc6, 0x98, 0x61, 0x09,
        0xc9, 0x3f, 0x96, 0x31, 0x00, 0x00, 0x00, 0x63, 0xbd, 0x20, 0x67, 0x04, 0x00, 0x00, 0x00,
        0x5c, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x54, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef,
        0xbe, 0xad, 0xde, 0x82, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x04, 0x00, 0x00,
        0x9f, 0x3f, 0xf7, 0x32, 0x8f, 0x30, 0xc8, 0x07, 0x30, 0x00, 0x00, 0x00, 0xae, 0x6d, 0x9e,
        0x92, 0x04, 0x00, 0x00, 0x00, 0xac, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe,
        0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x04, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0xd2, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x78, 0x04, 0x00, 0x00, 0x43, 0x75, 0xcf, 0xb3, 0x9c, 0x41, 0xcf, 0x72, 0x2f, 0x00,
        0x00, 0x00, 0xb7, 0x81, 0x69, 0x3a, 0x04, 0x00, 0x00, 0x00, 0xfc, 0x04, 0x00, 0x00, 0x0c,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x04, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x05, 0x00,
        0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x22, 0x05,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xc8, 0x04, 0x00, 0x00, 0x01, 0x5d, 0x02, 0xe1, 0xc5,
        0x39, 0x7a, 0x63, 0x2e, 0x00, 0x00, 0x00, 0x3e, 0x3b, 0x2f, 0x42, 0x04, 0x00, 0x00, 0x00,
        0x4c, 0x05, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x44, 0x05, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x5c, 0x05, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef,
        0xbe, 0xad, 0xde, 0x72, 0x05, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x05, 0x00, 0x00,
        0x6d, 0x48, 0x6f, 0x16, 0x15, 0x2d, 0x7d, 0x59, 0x2d, 0x00, 0x00, 0x00, 0xcb, 0x60, 0x1f,
        0xd4, 0x04, 0x00, 0x00, 0x00, 0x9c, 0x05, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x05, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe,
        0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x05, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0xc2, 0x05, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x68, 0x05, 0x00, 0x00, 0xc7, 0x03, 0xa5, 0x71, 0x10, 0x83, 0xb8, 0x6f, 0x2c, 0x00,
        0x00, 0x00, 0x9d, 0xd1, 0xb6, 0x5b, 0x04, 0x00, 0x00, 0x00, 0xec, 0x05, 0x00, 0x00, 0x0c,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x05, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x05, 0x00,
        0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x12, 0x06,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xb8, 0x05, 0x00, 0x00, 0x0d, 0x75, 0x6b, 0x61, 0xf1,
        0x75, 0x63, 0x82, 0x2b, 0x00, 0x00, 0x00, 0xb3, 0xbc, 0xe9, 0x31, 0x04, 0x00, 0x00, 0x00,
        0x3c, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x34, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x06, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef,
        0xbe, 0xad, 0xde, 0x62, 0x06, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x06, 0x00, 0x00,
        0x41, 0x7e, 0x6c, 0x4b, 0x07, 0x2b, 0xef, 0x92, 0x2a, 0x00, 0x00, 0x00, 0x90, 0xd6, 0x99,
        0x21, 0x04, 0x00, 0x00, 0x00, 0x8c, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe,
        0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x06, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0xb2, 0x06, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x58, 0x06, 0x00, 0x00, 0x1d, 0x7e, 0x07, 0x6a, 0xb6, 0x51, 0xf7, 0xcb, 0x29, 0x00,
        0x00, 0x00, 0x1f, 0xb3, 0xb2, 0x0e, 0x04, 0x00, 0x00, 0x00, 0xdc, 0x06, 0x00, 0x00, 0x0c,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x06, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x06, 0x00,
        0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x02, 0x07,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa8, 0x06, 0x00, 0x00, 0xdd, 0x53, 0x8e, 0x08, 0xab,
        0x3c, 0x4c, 0xd6, 0x28, 0x00, 0x00, 0x00, 0xe4, 0x5d, 0xa8, 0xc8, 0x04, 0x00, 0x00, 0x00,
        0x2c, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x24, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3c, 0x07, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef,
        0xbe, 0xad, 0xde, 0x52, 0x07, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xf8, 0x06, 0x00, 0x00,
        0x09, 0x84, 0xbd, 0xbb, 0x7c, 0x97, 0xa6, 0x63, 0x27, 0x00, 0x00, 0x00, 0x18, 0x03, 0x75,
        0xf7, 0x04, 0x00, 0x00, 0x00, 0x7c, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x07, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe,
        0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x07, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0xa2, 0x07, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x48, 0x07, 0x00, 0x00, 0xbf, 0xe6, 0x60, 0x40, 0x8f, 0x1b, 0x59, 0xc8, 0x26, 0x00,
        0x00, 0x00, 0x61, 0xa2, 0x70, 0x81, 0x04, 0x00, 0x00, 0x00, 0xcc, 0x07, 0x00, 0x00, 0x0c,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x07, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x07, 0x00,
        0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0xf2, 0x07,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x98, 0x07, 0x00, 0x00, 0xc1, 0xd6, 0x85, 0xdd, 0x9d,
        0xb0, 0xa9, 0x8c, 0x25, 0x00, 0x00, 0x00, 0x84, 0x3b, 0xc0, 0x6e, 0x04, 0x00, 0x00, 0x00,
        0x1c, 0x08, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x14, 0x08, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x2c, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef,
        0xbe, 0xad, 0xde, 0x42, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe8, 0x07, 0x00, 0x00,
        0x4d, 0x43, 0xc1, 0x1f, 0xe2, 0x60, 0x96, 0x97, 0x24, 0x00, 0x00, 0x00, 0xdf, 0xa8, 0x4a,
        0xc1, 0x04, 0x00, 0x00, 0x00, 0x6c, 0x08, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x08, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe,
        0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x92, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x38, 0x08, 0x00, 0x00, 0x2d, 0xd7, 0x52, 0x67, 0x78, 0x55, 0xf8, 0x51, 0x23, 0x00,
        0x00, 0x00, 0xa0, 0x7a, 0xab, 0x1c, 0x04, 0x00, 0x00, 0x00, 0xbc, 0x08, 0x00, 0x00, 0x0c,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x08, 0x00,
        0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0xe2, 0x08,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x88, 0x08, 0x00, 0x00, 0x47, 0x13, 0xe8, 0x28, 0x21,
        0xcf, 0x1e, 0xce, 0x22, 0x00, 0x00, 0x00, 0x03, 0x8b, 0x66, 0x03, 0x04, 0x00, 0x00, 0x00,
        0x0c, 0x09, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x04, 0x09, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef,
        0xbe, 0xad, 0xde, 0x32, 0x09, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xd8, 0x08, 0x00, 0x00,
        0x4d, 0x55, 0xb4, 0x33, 0xeb, 0x28, 0x98, 0x04, 0x21, 0x00, 0x00, 0x00, 0xb6, 0x18, 0x32,
        0xeb, 0x04, 0x00, 0x00, 0x00, 0x5c, 0x09, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x09, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe,
        0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x09, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x82, 0x09, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x28, 0x09, 0x00, 0x00, 0xf5, 0xb1, 0xed, 0xbd, 0x91, 0xb3, 0xad, 0x75, 0x20, 0x00,
        0x00, 0x00, 0x6c, 0x0e, 0xd3, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
        0x09, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xa8, 0x09, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xc0, 0x09, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe,
        0xad, 0xde, 0xd6, 0x09, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6,
        0x09, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0xf2, 0x09, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x98, 0x09, 0x00, 0x00, 0x4d, 0x7d, 0x4a,
        0x68, 0xb7, 0x11, 0x7a, 0x7b, 0x1f, 0x00, 0x00, 0x00, 0x0b, 0x14, 0xb2, 0x0a, 0x04, 0x00,
        0x00, 0x00, 0x1c, 0x0a, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x2c, 0x0a, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0xef, 0xbe, 0xad, 0xde, 0x42, 0x0a, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe8, 0x09,
        0x00, 0x00, 0x1b, 0xe3, 0xe6, 0x1a, 0x07, 0xd3, 0xa1, 0xab, 0x1e, 0x00, 0x00, 0x00, 0xce,
        0x90, 0xea, 0x58, 0x04, 0x00, 0x00, 0x00, 0x6c, 0x0a, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x0a, 0x00, 0x00, 0x0c, 0x00, 0x00,
        0x00, 0xfe, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x0a, 0x00, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x92, 0x0a, 0x00, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x38, 0x0a, 0x00, 0x00, 0x1d, 0x84, 0xe0, 0xd3, 0x01, 0xec, 0x18, 0x7f,
        0x1d, 0x00, 0x00, 0x00, 0x8d, 0xcc, 0xa3, 0x42, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xc0, 0x0a, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xb8, 0x0a, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfe, 0xca, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xd0, 0x0a, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xef, 0xbe, 0xad, 0xde,
    ];

    deserialize_worker_interface(&buffer_15WorkerInterface)?;
    Ok(())
}
pub async fn register_worker(svc: &Arc<ConnectionKeeper>, endpoint: Endpoint) -> Result<()> {
    let req =
        REQUEST_BUILDER.with(|builder| serialize_request(&mut builder.borrow_mut(), endpoint))?;
    let res = svc.rpc(req).await?;
    println!("{:x?}", deserialize_response(res)?);
    Ok(())
}
