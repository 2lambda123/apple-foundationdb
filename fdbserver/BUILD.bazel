load('//:fdb.bzl', 'fdb_utility_library')
load('//:fdb.bzl', 'fdb_binary')

fdb_utility_library(
    name = "sqlite",
    hdrs = [
        "sqlite/btree.c",
        "sqlite/btree.h",
        "sqlite/hash.h",
        "sqlite/sqlite3.h",
        "sqlite/sqlite3ext.h",
        "sqlite/sqliteInt.h",
        "sqlite/sqliteLimit.h",
    ],
    srcs = [
        "sqlite/sqlite3.amalgamation.c",
    ],
)

fdb_binary(
    name = "fdbserver",
    srcs = [
        "ApplyMetadataMutation.h",
        "ClusterRecruitmentInterface.h",
        "ConflictSet.h",
        "CoordinatedState.h",
        "CoordinationInterface.h",
        "CoroFlow.h",
        "DBCoreState.h",
        "DataDistribution.h",
        "IDiskQueue.h",
        "IKeyValueStore.h",
        "Knobs.h",
        "LeaderElection.h",
        "LogProtocolMessage.h",
        "LogSystem.h",
        "LogSystemConfig.h",
        "LogSystemDiskQueueAdapter.h",
        "MasterInterface.h",
        "MoveKeys.h",
        "NetworkTest.h",
        "Orderer.actor.h",
        "QuietDatabase.h",
        "Ratekeeper.h",
        "RecoveryState.h",
        "ResolverInterface.h",
        "ServerDBInfo.h",
        "SimulatedCluster.h",
        "Status.h",
        "StorageMetrics.actor.h",
        "StorageMetrics.h",
        "TLogInterface.h",
        "TesterInterface.h",
        "WaitFailure.h",
        "WorkerInterface.h",
        "pubsub.h",
        "template_fdb.h",
        "workloads/ApiWorkload.h",
        "workloads/AsyncFile.actor.h",
        "workloads/BulkSetup.actor.h",
        "workloads/MemoryKeyValueStore.h",
        "workloads/workloads.h",

        "ClusterController.actor.cpp",
        "CoordinatedState.actor.cpp",
        "Coordination.actor.cpp",
        "CoroFlow.actor.cpp",
        "DataDistribution.actor.cpp",
        "DataDistributionQueue.actor.cpp",
        "DataDistributionTracker.actor.cpp",
        "DiskQueue.actor.cpp",
        "fdbserver.actor.cpp",
        "KeyValueStoreCompressTestData.actor.cpp",
        "KeyValueStoreMemory.actor.cpp",
        "KeyValueStoreSQLite.actor.cpp",
        "Knobs.cpp",
        "LeaderElection.actor.cpp",
        "LogRouter.actor.cpp",
        "LogSystemDiskQueueAdapter.actor.cpp",
        "LogSystemPeekCursor.actor.cpp",
        "MasterProxyServer.actor.cpp",
        "masterserver.actor.cpp",
        "MoveKeys.actor.cpp",
        "networktest.actor.cpp",
        "OldTLogServer.actor.cpp",
        "pubsub.actor.cpp",
        "QuietDatabase.actor.cpp",
        "Ratekeeper.actor.cpp",
        "Resolver.actor.cpp",
        "SimulatedCluster.actor.cpp",
        "SkipList.cpp",
        "Status.actor.cpp",
        "storageserver.actor.cpp",
        "TagPartitionedLogSystem.actor.cpp",
        "tester.actor.cpp",
        "TLogServer.actor.cpp",
        "VFSAsync.cpp",
        "WaitFailure.actor.cpp",
        "worker.actor.cpp",
        "workloads/ApiCorrectness.actor.cpp",
        "workloads/ApiWorkload.actor.cpp",
        "workloads/AsyncFileCorrectness.actor.cpp",
        "workloads/AsyncFile.cpp",
        "workloads/AsyncFileRead.actor.cpp",
        "workloads/AsyncFileWrite.actor.cpp",
        "workloads/AtomicOps.actor.cpp",
        "workloads/AtomicOpsApiCorrectness.actor.cpp",
        "workloads/AtomicRestore.actor.cpp",
        "workloads/AtomicSwitchover.actor.cpp",
        "workloads/BackgroundSelectors.actor.cpp",
        "workloads/BackupCorrectness.actor.cpp",
        "workloads/BackupToDBAbort.actor.cpp",
        "workloads/BackupToDBCorrectness.actor.cpp",
        "workloads/BackupToDBUpgrade.actor.cpp",
        "workloads/BulkLoad.actor.cpp",
        "workloads/ChangeConfig.actor.cpp",
        "workloads/ClientTransactionProfileCorrectness.actor.cpp",
        "workloads/CommitBugCheck.actor.cpp",
        "workloads/ConfigureDatabase.actor.cpp",
        "workloads/ConflictRange.actor.cpp",
        "workloads/ConsistencyCheck.actor.cpp",
        "workloads/CpuProfiler.actor.cpp",
        "workloads/Cycle.actor.cpp",
        "workloads/DDBalance.actor.cpp",
        "workloads/DDMetrics.actor.cpp",
        "workloads/DiskDurability.actor.cpp",
        "workloads/DiskDurabilityTest.actor.cpp",
        "workloads/DummyWorkload.actor.cpp",
        "workloads/FastTriggeredWatches.actor.cpp",
        "workloads/FileSystem.actor.cpp",
        "workloads/FuzzApiCorrectness.actor.cpp",
        "workloads/Fuzz.cpp",
        "workloads/Increment.actor.cpp",
        "workloads/IndexScan.actor.cpp",
        "workloads/Inventory.actor.cpp",
        "workloads/KVStoreTest.actor.cpp",
        "workloads/LockDatabase.actor.cpp",
        "workloads/LogMetrics.actor.cpp",
        "workloads/LowLatency.actor.cpp",
        "workloads/MachineAttrition.actor.cpp",
        "workloads/MemoryKeyValueStore.cpp",
        "workloads/MemoryLifetime.actor.cpp",
        "workloads/MetricLogging.actor.cpp",
        "workloads/Performance.actor.cpp",
        "workloads/Ping.actor.cpp",
        "workloads/PubSubMultiples.actor.cpp",
        "workloads/QueuePush.actor.cpp",
        "workloads/RandomClogging.actor.cpp",
        "workloads/RandomMoveKeys.actor.cpp",
        "workloads/RandomSelector.actor.cpp",
        "workloads/ReadWrite.actor.cpp",
        "workloads/RemoveServersSafely.actor.cpp",
        "workloads/Rollback.actor.cpp",
        "workloads/RyowCorrectness.actor.cpp",
        "workloads/RYWDisable.actor.cpp",
        "workloads/RYWPerformance.actor.cpp",
        "workloads/SaveAndKill.actor.cpp",
        "workloads/SelectorCorrectness.actor.cpp",
        "workloads/Serializability.actor.cpp",
        "workloads/Sideband.actor.cpp",
        "workloads/SlowTaskWorkload.actor.cpp",
        "workloads/StatusWorkload.actor.cpp",
        "workloads/Storefront.actor.cpp",
        "workloads/StreamingRead.actor.cpp",
        "workloads/TargetedKill.actor.cpp",
        "workloads/TaskBucketCorrectness.actor.cpp",
        "workloads/ThreadSafety.actor.cpp",
        "workloads/Throughput.actor.cpp",
        "workloads/TimeKeeperCorrectness.actor.cpp",
        "workloads/UnitPerf.actor.cpp",
        "workloads/UnitTests.actor.cpp",
        "workloads/Unreadable.actor.cpp",
        "workloads/VersionStamp.actor.cpp",
        "workloads/WatchAndWait.actor.cpp",
        "workloads/Watches.actor.cpp",
        "workloads/WorkerErrors.actor.cpp",
        "workloads/WriteBandwidth.actor.cpp",
        "workloads/WriteDuringRead.actor.cpp",
    ],
    deps = [
        ":sqlite",
        "//flow:libflow",
        "//fdbrpc:headers",
        "//fdbrpc:libfdbrpc",
        "//fdbclient:headers",
        "//fdbclient:libfdbclient",
        "//fdbmonitor:headers",
    ],
)

# TODO(rescriva)
#createtemplatedb: bin/fdbserver
#	bin/fdbserver -r createtemplatedb
#	python -c 'import textwrap; s=open("template.fdb", "rb").read().encode("hex").upper(); t="".join(["\\x"+x+y for (x,y) in zip(s[0::2], s[1::2])]) ; open("fdbserver/template_fdb.h","wb").write("static const char template_fdb[] = \\\n\t\"%s\";"%"\" \\\n\t\"".join(textwrap.wrap(t,80)))'
